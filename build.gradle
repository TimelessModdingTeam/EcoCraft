buildscript {
    repositories {
        mavenCentral()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
        maven {
            name = "sonatype"
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
        }
    }
    dependencies {
        classpath "net.minecraftforge.gradle:ForgeGradle:2.1-SNAPSHOT"
    }
}

apply plugin: "idea"
apply plugin: "eclipse"

subprojects {
    subProject ->

    apply plugin: "java"
    apply plugin: "net.minecraftforge.gradle.forge"

    sourceCompatibility = targetCompatibility = "1.8"

    minecraft {
        version = "1.8.9-11.15.1.1722"
        runDir = "minecraft"
        mappings = "stable_22"
    }

    dependencies {
        testCompile 'junit:junit:4.12'
    }
    
    task deobfJar(type: Jar) {
        from sourceSets.main.output
        classifier = 'dev'
    }
    
    configurations {
        deobf
        sources
        
        archives.extendsFrom deobf
        archives.extendsFrom sources
    }
    
    artifacts {
        deobf deobfJar
        sources sourceJar
    }

    afterEvaluate{
        processResources {
            inputs.property "version", subProject.version
            inputs.property "mcversion", subProject.minecraft.version
    
            from(subProject.sourceSets.main.resources.srcDirs) {
                include "mcmod.info"
                expand "version": project.version, "mcversion": project.minecraft.version
            }
    
            from(subProject.sourceSets.main.resources.srcDirs) {
                exclude "mcmod.info"
            }
        }
        subProject.configurations.archives.allArtifacts.each {
            artifact->
            def taskname = "gatherOutputs" + artifact.classifier
            def task = tasks.findByPath(taskname)
            if(task == null) {
                task = tasks.create(name: taskname, type: LinkTask, {
                    outputDir = file("build/" + artifact.classifier)
                })
                tasks.findByPath(":build").dependsOn task
                if(artifact.classifier == "") {
                    task.dependsOn tasks.findByPath("reobfJar")
                }
            }
            task.inputs.file artifact.file
            task.dependsOn artifact
        }
    }
}

task("build")

def getVersion(String main, String type) {
    String major = "0";
    String revision = "0";
    String patch = "0";
    String dir = main.toLowerCase()
    String prefix = "public static final String $type = \"";
    File mainfile = file("$dir/src/main/java/net/ecocraft/$dir/$main" + ".java")
    mainfile.eachLine { String s ->
        s = s.trim();
        if (s.startsWith(prefix)) {
            s = s.substring(prefix.length(), s.length() - 2);
            String[] pts = s.split("\\.");

            major = pts[0];
            revision = pts[1];
            patch = pts[2];
        }
    }
    return "$major.$revision.$patch";
}